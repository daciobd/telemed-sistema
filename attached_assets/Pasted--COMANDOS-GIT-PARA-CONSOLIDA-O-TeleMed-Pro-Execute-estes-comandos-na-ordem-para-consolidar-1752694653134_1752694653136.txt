# 🔧 COMANDOS GIT PARA CONSOLIDAÇÃO - TeleMed Pro
# Execute estes comandos na ordem para consolidar o projeto

# ===============================================
# 1. PREPARAÇÃO E BACKUP
# ===============================================

echo "🚀 Iniciando consolidação TeleMed Pro v1.0.0"

# Verificar status atual
git status

# Criar branch de backup antes da limpeza
git checkout -b backup-before-cleanup
git add .
git commit -m "backup: versão antes da consolidação

📦 Backup completo do projeto antes da limpeza
🗂️ Inclui todos os arquivos experimentais
💾 Pode ser restaurado se necessário"

git push origin backup-before-cleanup

# Voltar para main
git checkout main

# ===============================================
# 2. EXECUTAR LIMPEZA
# ===============================================

# Executar script de limpeza (se não executou ainda)
chmod +x cleanup.sh
./cleanup.sh

# ===============================================
# 3. ORGANIZAR ARQUIVOS PRINCIPAIS
# ===============================================

# Verificar se os arquivos principais estão nos lugares corretos
echo "📁 Verificando estrutura de arquivos..."

# Criar diretório public se não existir
mkdir -p public

# Mover arquivos principais para public (se necessário)
if [ -f "medical-dashboard-pro.html" ]; then
    mv medical-dashboard-pro.html public/
    echo "✅ medical-dashboard-pro.html movido para public/"
fi

if [ -f "demo-guide.html" ]; then
    mv demo-guide.html public/
    echo "✅ demo-guide.html movido para public/"
fi

if [ -f "patient-dashboard.html" ]; then
    mv patient-dashboard.html public/
    echo "✅ patient-dashboard.html movido para public/"
fi

# Verificar se index.html existe
if [ ! -f "public/index.html" ]; then
    echo "⚠️ index.html não encontrado em public/"
    echo "💡 Você precisa criar ou mover o arquivo index.html para public/"
fi

# ===============================================
# 4. COMMIT DA VERSÃO LIMPA
# ===============================================

# Adicionar todos os arquivos da versão limpa
git add .

# Verificar o que será commitado
echo "📋 Arquivos que serão commitados:"
git diff --cached --name-status

# Commit da versão consolidada
git commit -m "feat: versão final consolidada v1.0.0

🧹 LIMPEZA E CONSOLIDAÇÃO:
✅ Removidos arquivos obsoletos e duplicados
✅ Estrutura organizada em /public
✅ Documentação atualizada
✅ Scripts de manutenção criados

🗑️ ARQUIVOS REMOVIDOS:
❌ server-fix.js, ultra-fix.js, app.js
❌ index.mjs, emergency.js, deploy*.js
❌ test*.html, demo-*.html
❌ railway.json, render.yaml
❌ Diretórios: client/, server/, shared/, dist/

📁 ESTRUTURA FINAL:
✅ public/ - Arquivos servidos
✅ config/ - Configurações
✅ docs/ - Documentação
✅ backups/ - Backups automáticos

🚀 PRONTO PARA:
✅ Deploy em produção
✅ Demonstrações médicas
✅ Coleta de feedback
✅ Expansão futura

📊 ESTATÍSTICAS:
• Redução: ~60% dos arquivos
• Performance: Deploy mais rápido
• Manutenção: Código organizado"

# ===============================================
# 5. CRIAR TAG DA VERSÃO
# ===============================================

# Tag da versão final
git tag -a v1.0.0 -m "TeleMed Pro v1.0.0 - Versão Final Consolidada

🎯 MARCOS DESTA VERSÃO:
✅ Sistema de telemedicina completo
✅ Interface médica profissional
✅ Simulações realistas para demo
✅ Guia de demonstração para médicos
✅ Estrutura limpa e organizada

🏥 FUNCIONALIDADES:
• Dashboard médico avançado
• Sistema híbrido demo/real
• Integração MEMED (simulada)
• Videoconsultas WebRTC (simulada)
• Assistente IA médico (simulada)
• Pagamentos Stripe (simulado)

📱 COMPATIBILIDADE:
• Desktop: Chrome, Firefox, Safari
• Mobile: iOS, Android
• Tablets: Interface responsiva

🚀 DEPLOY:
• Vercel: Otimizado
• URLs amigáveis
• Performance alta
• Segurança configurada"

# ===============================================
# 6. PUSH PARA REPOSITÓRIO
# ===============================================

# Push da branch main com tags
git push origin main --tags

echo "✅ Consolidação commitada e enviada para repositório"

# ===============================================
# 7. VERIFICAÇÕES FINAIS
# ===============================================

echo ""
echo "🔍 VERIFICAÇÕES FINAIS:"
echo "======================"

# Verificar se arquivos essenciais existem
ESSENTIAL_FILES=(
    "public/index.html"
    "public/medical-dashboard-pro.html"
    "public/demo-guide.html"
    "package.json"
    "vercel.json"
    ".env.example"
    ".gitignore"
)

echo "📁 Verificando arquivos essenciais..."
for file in "${ESSENTIAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "✅ $file"
    else
        echo "❌ $file - AUSENTE"
    fi
done

# Mostrar estrutura final
echo ""
echo "📂 Estrutura final do projeto:"
tree -L 2 -a 2>/dev/null || ls -la

# Verificar tamanho do projeto
echo ""
echo "📊 Estatísticas do projeto limpo:"
echo "Tamanho total: $(du -sh . 2>/dev/null | cut -f1)"
echo "Número de arquivos: $(find . -type f | wc -l)"
echo "Últimos commits:"
git log --oneline -3

# ===============================================
# 8. INSTRUÇÕES FINAIS
# ===============================================

echo ""
echo "🎉 CONSOLIDAÇÃO CONCLUÍDA COM SUCESSO!"
echo "====================================="
echo ""
echo "📋 O QUE FOI FEITO:"
echo "   ✅ Backup criado (branch: backup-before-cleanup)"
echo "   ✅ Arquivos obsoletos removidos"
echo "   ✅ Estrutura organizada"
echo "   ✅ Versão v1.0.0 taggeada"
echo "   ✅ Push realizado"
echo ""
echo "🚀 PRÓXIMOS PASSOS:"
echo "   1. Testar localmente: npm run dev"
echo "   2. Deploy no Vercel: vercel --prod"
echo "   3. Atualizar links nos emails para médicos"
echo "   4. Coletar feedback da versão consolidada"
echo ""
echo "🌐 LINKS FINAIS (após deploy):"
echo "   Landing: https://telemed.vercel.app/"
echo "   Dashboard: https://telemed.vercel.app/dashboard"
echo "   Demo Guide: https://telemed.vercel.app/demo"
echo ""
echo "📧 TEMPLATE DE EMAIL ATUALIZADO:"
echo "   'Prezado Dr., o TeleMed Pro foi atualizado!"
echo "   Nova versão mais estável e profissional."
echo "   Teste em: https://telemed.vercel.app/demo'"
echo ""
echo "💾 RECOVERY (se necessário):"
echo "   git checkout backup-before-cleanup"
echo "   git checkout main"
echo ""

# ===============================================
# 9. COMANDOS DE DEPLOY AUTOMÁTICO
# ===============================================

echo "⚡ DEPLOY AUTOMÁTICO VERCEL:"
echo "=========================="

# Verificar se Vercel CLI está instalado
if command -v vercel &> /dev/null; then
    echo "✅ Vercel CLI detectado"
    
    # Perguntar se quer fazer deploy agora
    read -p "🚀 Fazer deploy agora? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "🚀 Iniciando deploy..."
        
        # Login no Vercel (se necessário)
        vercel login
        
        # Link do projeto (se necessário)
        vercel link
        
        # Deploy de produção
        vercel --prod
        
        echo "✅ Deploy concluído!"
        echo "🌐 Verifique o resultado no dashboard da Vercel"
    else
        echo "⏭️ Deploy cancelado pelo usuário"
        echo "💡 Para deploy manual: vercel --prod"
    fi
else
    echo "⚠️ Vercel CLI não instalado"
    echo "📦 Para instalar: npm i -g vercel"
    echo "🚀 Depois: vercel --prod"
fi

echo ""

# ===============================================
# 10. SCRIPT DE TESTE LOCAL
# ===============================================

echo "🧪 TESTE LOCAL AUTOMÁTICO:"
echo "========================="

# Verificar se serve está instalado
if ! command -v serve &> /dev/null; then
    echo "📦 Instalando dependências..."
    npm install
fi

read -p "🧪 Testar localmente agora? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🧪 Iniciando servidor local..."
    echo "🌐 Acesse: http://localhost:3000"
    echo "📋 Para parar: Ctrl+C"
    echo ""
    
    # Iniciar servidor local
    npm run dev
else
    echo "⏭️ Teste local cancelado"
    echo "💡 Para testar: npm run dev"
fi

# ===============================================
# 11. VERIFICAÇÃO DE INTEGRIDADE FINAL
# ===============================================

echo ""
echo "🔐 VERIFICAÇÃO DE INTEGRIDADE:"
echo "============================="

# Verificar se não há arquivos obsoletos restantes
OBSOLETE_PATTERNS=(
    "server-fix.*"
    "ultra-fix.*"
    "emergency.*"
    "test-*.html"
    "demo-*.html"
    "index.mjs"
)

echo "🗑️ Verificando se arquivos obsoletos foram removidos..."
obsolete_found=false

for pattern in "${OBSOLETE_PATTERNS[@]}"; do
    if ls $pattern 1> /dev/null 2>&1; then
        echo "⚠️ Arquivo obsoleto encontrado: $pattern"
        obsolete_found=true
    fi
done

if [ "$obsolete_found" = false ]; then
    echo "✅ Todos os arquivos obsoletos foram removidos"
else
    echo "❌ Alguns arquivos obsoletos ainda existem"
    echo "💡 Execute: rm -f server-fix.* ultra-fix.* emergency.* test-*.html demo-*.html index.mjs"
fi

# Verificar estrutura final
echo ""
echo "📁 Verificando estrutura final..."

if [ -d "public" ] && [ -f "public/index.html" ]; then
    echo "✅ Estrutura public/ correta"
else
    echo "❌ Estrutura public/ incorreta"
    echo "💡 Verifique se os arquivos estão em public/"
fi

if [ -f "package.json" ] && [ -f "vercel.json" ]; then
    echo "✅ Arquivos de configuração presentes"
else
    echo "❌ Arquivos de configuração ausentes"
fi

# ===============================================
# 12. RELATÓRIO FINAL
# ===============================================

echo ""
echo "📊 RELATÓRIO FINAL DA CONSOLIDAÇÃO:"
echo "=================================="

# Contar arquivos por tipo
html_files=$(find public -name "*.html" 2>/dev/null | wc -l)
js_files=$(find public -name "*.js" 2>/dev/null | wc -l)
css_files=$(find public -name "*.css" 2>/dev/null | wc -l)
config_files=$(find . -maxdepth 1 -name "*.json" -o -name "*.md" -o -name ".env*" -o -name ".git*" | wc -l)

echo "📄 Arquivos HTML: $html_files"
echo "⚡ Arquivos JS: $js_files"
echo "🎨 Arquivos CSS: $css_files"
echo "⚙️ Arquivos config: $config_files"

# Mostrar últimas tags
echo ""
echo "🏷️ Versões do projeto:"
git tag --sort=-version:refname | head -5

# Status git final
echo ""
echo "📋 Status Git:"
if git diff-index --quiet HEAD --; then
    echo "✅ Working directory limpo"
else
    echo "⚠️ Há alterações não commitadas"
    git status --short
fi

echo ""
echo "🎯 MISSÃO CUMPRIDA!"
echo "=================="
echo "✅ Projeto TeleMed Pro consolidado com sucesso"
echo "✅ Versão v1.0.0 criada e taggeada"
echo "✅ Estrutura limpa e organizada"
echo "✅ Pronto para demonstrações médicas"
echo "✅ Preparado para deploy em produção"
echo ""
echo "🚀 Que venham os feedback dos médicos!"