Aqui est√° um exemplo seguro e funcional para a rota /api/test-demo-safe e o bot√£o correspondente no frontend.

‚úÖ 1. C√≥digo do Backend (server/routes/test-demo-safe.ts)
Esse c√≥digo cria dados fict√≠cios (um m√©dico, um paciente, um prontu√°rio) e lida com erros corretamente.

ts
Copiar
Editar
// server/routes/test-demo-safe.ts
import express from 'express';
const router = express.Router();

// Substitua pelas suas classes reais de banco de dados (Mongo, Sequelize etc.)
const fakeDB = {
  doctors: [],
  patients: [],
  records: [],
};

router.post('/test-demo-safe', async (req, res) => {
  try {
    console.log("üîß [test-demo-safe] Iniciando cria√ß√£o de dados...");

    const doctor = { id: Date.now(), name: "Dr. Demo" };
    const patient = { id: Date.now() + 1, name: "Patient Demo" };
    const record = {
      id: Date.now() + 2,
      doctorId: doctor.id,
      patientId: patient.id,
      notes: "Consulta de demonstra√ß√£o",
    };

    fakeDB.doctors.push(doctor);
    fakeDB.patients.push(patient);
    fakeDB.records.push(record);

    console.log("‚úÖ [test-demo-safe] Dados criados:", {
      doctor,
      patient,
      record,
    });

    res.status(200).json({ success: true, doctor, patient, record });
  } catch (error) {
    console.error("‚ùå [test-demo-safe] Erro ao criar dados:", error);
    res.status(500).json({ error: "Erro ao criar dados demo" });
  }
});

export default router;
‚ö†Ô∏è Certifique-se de importar esse router no seu server/index.ts:

ts
Copiar
Editar
import express from 'express';
import testDemoSafe from './routes/test-demo-safe';

const app = express();
app.use(express.json());

// Use a rota
app.use('/api', testDemoSafe);

// Start server...
‚úÖ 2. C√≥digo do Frontend (React ou Vanilla JS)
Substitua o handler do bot√£o no seu arquivo TestDemoPage.tsx ou JS equivalente:

jsx
Copiar
Editar
<button onClick={handleTestDemoSafe}>Test Demo API (Safe Route)</button>
js
Copiar
Editar
function handleTestDemoSafe() {
  fetch("/api/test-demo-safe", { method: "POST" })
    .then((res) => res.json())
    .then((data) => {
      console.log("‚úÖ Dados de teste criados:", data);
      alert("Demo data created with success!");
    })
    .catch((error) => {
      console.error("‚ùå Erro ao criar dados:", error);
      alert("Erro ao criar dados demo.");
    });
}
‚úÖ Resultado
Sem depend√™ncia externa sens√≠vel (como conex√£o com MongoDB, se voc√™ quiser evitar isso s√≥ para o teste).

Com console.log para debug no backend.

Com alert ou tratamento visual simples no frontend.

Compat√≠vel com o ambiente Replit.

Se voc√™ estiver usando MongoDB ou outro banco real, posso adaptar este exemplo para salvar de verdade usando mongoose ou prisma.