Comportamento (atalho, loading, contador, resposta)

Mensagem para o Replit — patch do componente

applypatch <<'PATCH'
*** Begin Patch
*** Update File: client/src/pages/ai-console.tsx
@@
-import './ai-console.css';
-if (process.env.NODE_ENV !== 'production') console.debug('[AIConsole] dev mode');
+import './ai-console.css';
+import React, { useEffect, useMemo, useRef, useState } from 'react';
+if (process.env.NODE_ENV !== 'production') console.debug('[AIConsole] dev mode');
+
+const EMAIL_RE = /\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b/i;
+const CPF_RE = /\b\d{3}\.?\d{3}\.?\d{3}-?\d{2}\b/;
+const PHONE_BR_RE = /\b(?:\+?55\s?)?(?:\(?\d{2}\)?\s*)?\d{4,5}-?\d{4}\b/;
+
+function hasPII(txt: string) {
+  return EMAIL_RE.test(txt) || CPF_RE.test(txt) || PHONE_BR_RE.test(txt);
+}
@@
-return (
-  <main className="ai-wrap" role="main" aria-label="TeleMed AI Console">
+export default function AIConsolePage(){
+  const [q, setQ] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [resp, setResp] = useState<string | null>(null);
+  const [warn, setWarn] = useState<string | null>(null);
+  const taRef = useRef<HTMLTextAreaElement>(null);
+
+  const disabled = useMemo(()=> loading || !q.trim() , [loading, q]);
+
+  async function handleAsk(){
+    const text = q.trim();
+    setWarn(null);
+    if (!text) return;
+    if (hasPII(text)) {
+      setWarn('Detectamos possível PII (email/telefone/CPF). Remova antes de enviar.');
+      return;
+    }
+    setLoading(true);
+    try{
+      const r = await fetch('/api/ai/ask', {
+        method:'POST',
+        headers:{'Content-Type':'application/json'},
+        body: JSON.stringify({ q: text })
+      });
+      const j = await r.json();
+      setResp(j?.answer ?? 'Sem resposta.');
+    } catch(e:any){
+      setResp('Erro ao consultar o agente.');
+    } finally{
+      setLoading(false);
+    }
+  }
+
+  function handleKey(e: React.KeyboardEvent){
+    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
+      e.preventDefault();
+      handleAsk();
+    }
+  }
+
+  useEffect(()=>{ taRef.current?.focus(); }, []);
+
+  return (
+  <main className="ai-wrap" role="main" aria-label="TeleMed AI Console">
     <section className="ai-card">
       <h1>TeleMed AI Console — V2</h1>
       <p className="subtitle">Faça perguntas técnicas ou gere trechos de código com segurança (sem PII).</p>
@@
-      <div className="toolbar" role="group" aria-label="Ações do Agent">
-        <button className="btn primary" type="button">Perguntar (Q&amp;A)</button>
-        <button className="btn" type="button">Gerar Código</button>
+      <div className="toolbar" role="group" aria-label="Ações do Agent">
+        <button className="btn primary" type="button" onClick={handleAsk} disabled={disabled}>
+          {loading ? 'Enviando…' : 'Perguntar (Q&A)'}
+        </button>
+        <button className="btn" type="button" onClick={()=>setResp('`// em breve: gerar snippet`')}>Gerar Código</button>
       </div>
@@
-            <textarea id="q" placeholder="Ex.: Explique opções de autenticação" aria-describedby="q-hint" />
-            <div id="q-hint" className="hint">Sem PII • Atalho: <span className="kbd">Ctrl/⌘ + Enter</span></div>
+            <textarea
+              ref={taRef}
+              id="q"
+              maxLength={2000}
+              value={q}
+              onChange={(e)=>setQ(e.target.value)}
+              onKeyDown={handleKey}
+              placeholder="Ex.: Explique opções de autenticação"
+              aria-describedby="q-hint"
+            />
+            <div id="q-hint" className="hint">
+              {q.length}/2000 • Sem PII • Atalho: <span className="kbd">Ctrl/⌘ + Enter</span>
+            </div>
+            {warn && <div role="alert" className="hint" style="color:#b45309">{warn}</div>}
           </div>
           <div className="actions">
-            <button className="btn primary" type="button">Perguntar ao Agent</button>
-            <button className="btn" type="button" aria-label="Limpar conversa">🗑️ Limpar</button>
+            <button className="btn primary" type="button" onClick={handleAsk} disabled={disabled}>
+              {loading ? 'Perguntando…' : 'Perguntar ao Agent'}
+            </button>
+            <button className="btn" type="button" aria-label="Limpar conversa" onClick={()=>{ setQ(''); setResp(null); setWarn(null); taRef.current?.focus(); }}>
+              🗑️ Limpar
+            </button>
             <span className="spacer" />
           </div>
           <div className="resp" role="region" aria-live="polite" aria-label="Resposta">
-            <div className="muted">Nenhuma resposta ainda.</div>
+            {resp ? <pre style={{whiteSpace:'pre-wrap', margin:0}}>{resp}</pre> : <div className="muted">Nenhuma resposta ainda.</div>}
           </div>
         </div>
@@
-  </main>
-);
+  </main>
+);}
*** End Patch
PATCH

2) Endpoint mock no servidor (para já “responder”)

Mensagem para o Replit — Express

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
 import express from "express";
 const app = express();
+app.use(express.json());
@@
 // ... suas rotas existentes
 
+// Mock simples do agente (eco)
+app.post('/api/ai/ask', async (req, res) => {
+  const q = String(req.body?.q || '').slice(0, 2000);
+  // simula latência pequena
+  await new Promise(r => setTimeout(r, 250));
+  res.json({ answer: `🤖 (stub) Você perguntou:\n\n${q}\n\n— Quando ligar o backend real, troque este endpoint.` });
+});
*** End Patch
PATCH


Teste rápido fora do Replit: abra /ai-console, digite algo e use Ctrl/⌘+Enter — deve aparecer a resposta “(stub)”.

3) (Opcional) Dark mode automático

Mensagem para o Replit — CSS extra

applypatch <<'PATCH'
*** Begin Patch
*** Update File: client/src/pages/ai-console.css
@@
 @media (prefers-reduced-motion: reduce){ *{animation-duration:.01ms !important; animation-iteration-count:1 !important; transition-duration:.01ms !important} }
+
+/* Dark mode automático */
+@media (prefers-color-scheme: dark){
+  :root{ --bg:#0b1220; --card:#0f172a; --ink:#e5e7eb; --muted:#94a3b8; --bd:#1f2a44; --shadow:none }
+  .btn{ background:#0b1220; color:var(--ink); border-color:#24304d }
+  textarea,input{ background:#0b1220; color:var(--ink); border-color:#24304d }
+  .resp{ background:#0b1220 }
+}
*** End Patch
PATCH

4) Adicione a rota ao “smoke” (varredor)

Mensagem para o Replit — incluir /ai-console

applypatch <<'PATCH'
*** Begin Patch
*** Update File: scripts/smoke.cjs
@@
-  '/enhanced-consultation?consultationId=demo',
+  '/enhanced-consultation?consultationId=demo',
+  '/ai-console',
*** End Patch
PATCH


Depois, rode:

npm run smoke


Abra …/perf/smoke.html e veja se /ai-console está OK (200).