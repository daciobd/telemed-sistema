Abaixo est√£o **3 arquivos** prontos pra colar no seu projeto (Vite/React + Express/TS). Eles implementam a p√°gina **/enhanced** com v√≠deo real (getUserMedia), salvar evolu√ß√£o/prescri√ß√£o, buscar paciente/exames do backend e todo o **pacote de Analytics/Feedback/Banner** exatamente no formato que voc√™ descreveu (localStorage + window\.telemedDebug + limite 1000 + 7 dias de validade).

---

## 1) `client/src/lib/telemed-ux.tsx`

Biblioteca de UX/Analytics (localStorage), Banner e Modal de Feedback.

```tsx
// client/src/lib/telemed-ux.tsx
import React, { useEffect, useMemo, useState } from 'react';

// =====================
// localStorage helpers
// =====================
const ANALYTICS_KEY = 'telemed_analytics';
const FEEDBACKS_KEY = 'telemed_feedbacks';
const MAX_EVENTS = 1000;

const BANNER_DISMISSED = 'telemed_banner_dismissed';
const BANNER_DISMISSED_DATE = 'telemed_banner_dismissed_date';
const BANNER_VALID_DAYS = 7; // validade ap√≥s dismissal

const DASHBOARD_TESTED = 'telemed_dashboard_tested';
const DASHBOARD_TEST_DATE = 'telemed_dashboard_test_date';
const FEEDBACK_GIVEN = 'telemed_feedback_given';

function readList<T>(key: string): T[] {
  try {
    const raw = localStorage.getItem(key);
    return raw ? (JSON.parse(raw) as T[]) : [];
  } catch {
    return [];
  }
}

function writeList<T>(key: string, list: T[]) {
  try {
    localStorage.setItem(key, JSON.stringify(list.slice(-MAX_EVENTS)));
  } catch {}
}

export type AnalyticsEvent = {
  event: string;
  data: Record<string, any>;
  timestamp: string; // ISO
  userAgent: string;
  page: string;
};

export function trackEvent(event: string, data: Record<string, any> = {}) {
  const entry: AnalyticsEvent = {
    event,
    data: { ...data, timestamp: new Date().toISOString() },
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent,
    page: location.pathname,
  };
  const list = readList<AnalyticsEvent>(ANALYTICS_KEY);
  list.push(entry);
  writeList(ANALYTICS_KEY, list);
  // Google Analytics (se existir)
  // @ts-ignore
  if (typeof window !== 'undefined' && typeof (window as any).gtag === 'function') {
    // @ts-ignore
    (window as any).gtag('event', event, entry.data);
  }
}

export type Feedback = {
  rating: number; // 1..5
  quickOptions?: string[]; // ["design","speed","navigation","mobile"]
  comments?: string;
  timestamp: string;
  userAgent: string;
  url: string;
};

export function saveFeedback(fb: Omit<Feedback, 'timestamp' | 'userAgent' | 'url'>) {
  const full: Feedback = {
    ...fb,
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent,
    url: location.href,
  };
  const list = readList<Feedback>(FEEDBACKS_KEY);
  list.push(full);
  writeList(FEEDBACKS_KEY, list);
  localStorage.setItem(FEEDBACK_GIVEN, 'true');
}

// =====================
// Banner (com 7 dias de validade)
// =====================
export function shouldShowBanner(): boolean {
  const dismissed = localStorage.getItem(BANNER_DISMISSED) === 'true';
  if (!dismissed) return true;
  const when = localStorage.getItem(BANNER_DISMISSED_DATE);
  if (!when) return true;
  const days = (Date.now() - new Date(when).getTime()) / (1000 * 60 * 60 * 24);
  return days > BANNER_VALID_DAYS;
}

export function dismissBanner() {
  localStorage.setItem(BANNER_DISMISSED, 'true');
  localStorage.setItem(BANNER_DISMISSED_DATE, new Date().toISOString());
}

export function markDashboardTested() {
  localStorage.setItem(DASHBOARD_TESTED, 'true');
  localStorage.setItem(DASHBOARD_TEST_DATE, new Date().toISOString());
}

export function Banner({ onFeedback }: { onFeedback?: () => void }) {
  const [visible, setVisible] = useState(shouldShowBanner());
  useEffect(() => {
    if (visible) trackEvent('banner_shown', {});
  }, [visible]);
  if (!visible) return null;
  return (
    <div style={styles.banner}>
      <div style={{ display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>
        <span>üéâ Novo dashboard e consulta avan√ßada dispon√≠veis.</span>
        <button style={styles.btnPri} onClick={() => { markDashboardTested(); trackEvent('new_dashboard_clicked', { source: 'banner' }); location.href = '/enhanced'; }}>Testar agora</button>
        <button style={styles.btnSec} onClick={() => { onFeedback?.(); trackEvent('banner_feedback_click', {}); }}>Dar feedback</button>
      </div>
      <button style={styles.btnX} onClick={() => { dismissBanner(); setVisible(false); trackEvent('banner_dismissed', {}); }}>‚úï</button>
    </div>
  );
}

// =====================
// Modal de Feedback
// =====================
export function FeedbackModal({ open, onClose }: { open: boolean; onClose: () => void }) {
  const [rating, setRating] = useState<number>(0);
  const [quick, setQuick] = useState<string[]>([]);
  const [comments, setComments] = useState('');

  const toggle = (key: string) => setQuick(q => q.includes(key) ? q.filter(i => i !== key) : [...q, key]);
  const options = ['design', 'speed', 'navigation', 'mobile'];

  const canSend = rating > 0;

  if (!open) return null;
  return (
    <div style={styles.modalWrap} onClick={onClose}>
      <div style={styles.modal} onClick={e => e.stopPropagation()}>
        <h3 style={{ marginTop: 0 }}>Como foi a experi√™ncia?</h3>
        <p style={{ color: '#6B7280', marginTop: -6 }}>Avalie de 1 a 5 e selecione pontos r√°pidos</p>
        <div style={{ display: 'flex', gap: 6 }}>
          {[1, 2, 3, 4, 5].map(n => (
            <button key={n} onClick={() => setRating(n)} style={{ ...styles.star, background: rating >= n ? '#FBBF24' : '#E5E7EB' }}>{'‚òÖ'}</button>
          ))}
        </div>
        <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap', marginTop: 10 }}>
          {options.map(op => (
            <button key={op} onClick={() => toggle(op)} style={{ ...styles.pill, background: quick.includes(op) ? 'rgba(162,210,255,.22)' : '#fff', borderColor: quick.includes(op) ? 'rgba(162,210,255,.65)' : 'rgba(0,0,0,.12)' }}>{op}</button>
          ))}
        </div>
        <textarea placeholder="Coment√°rios (opcional)" value={comments} onChange={e => setComments(e.target.value)} style={styles.textarea} />
        <div style={{ display: 'flex', gap: 8, justifyContent: 'flex-end' }}>
          <button style={styles.btnSec} onClick={onClose}>Cancelar</button>
          <button style={{ ...styles.btnPri, opacity: canSend ? 1 : .5, pointerEvents: canSend ? 'auto' : 'none' }}
            onClick={() => { saveFeedback({ rating, quickOptions: quick, comments }); trackEvent('feedback_submitted', { rating, quick }); onClose(); }}
          >Enviar</button>
        </div>
      </div>
    </div>
  );
}

// =====================
// Debug hooks em window
// =====================
export function registerDebug(showModal: () => void, hideModal: () => void) {
  if (typeof window === 'undefined') return;
  (window as any).telemedDebug = {
    testBanner: () => {
      localStorage.removeItem(BANNER_DISMISSED);
      localStorage.removeItem(BANNER_DISMISSED_DATE);
      location.reload();
    },
    testModal: () => showModal(),
    showModal: () => showModal(),
    hideModal: () => hideModal(),
  };
}

// =====================
// Estilos inline (suficiente p/ modal e banner)
// =====================
const styles: Record<string, React.CSSProperties> = {
  banner: {
    position: 'sticky', top: 0, zIndex: 50, display: 'flex', justifyContent: 'space-between', alignItems: 'center',
    padding: '10px 14px', background: '#FFFFFF', border: '1px solid rgba(0,0,0,.06)', boxShadow: '0 2px 8px rgba(0,0,0,.05)', borderRadius: 12,
    marginBottom: 12
  },
  btnPri: { background: '#A2D2FF', border: '1px solid #A2D2FF', borderRadius: 10, padding: '8px 12px', fontWeight: 600, cursor: 'pointer' },
  btnSec: { background: 'transparent', border: '1px solid #A2D2FF', borderRadius: 10, padding: '8px 12px', fontWeight: 600, cursor: 'pointer' },
  btnX: { background: 'transparent', border: '1px solid rgba(0,0,0,.12)', borderRadius: 8, padding: '6px 8px', cursor: 'pointer' },
  modalWrap: { position: 'fixed', inset: 0, background: 'rgba(0,0,0,.25)', display: 'grid', placeItems: 'center', zIndex: 60 },
  modal: { width: 'min(560px, 92vw)', background: '#fff', border: '1px solid rgba(0,0,0,.06)', borderRadius: 14, boxShadow: '0 12px 40px rgba(0,0,0,.18)', padding: 20 },
  star: { width: 36, height: 36, borderRadius: 8, border: '1px solid rgba(0,0,0,.1)', cursor: 'pointer' },
  pill: { borderRadius: 999, padding: '6px 10px', border: '1px solid rgba(0,0,0,.12)', cursor: 'pointer', background: '#fff' },
  textarea: { width: '100%', minHeight: 90, padding: '10px 12px', borderRadius: 12, border: '1px solid rgba(0,0,0,.12)', marginTop: 10 }
};
```

---

## 2) `client/src/EnhancedConsultation.tsx`

P√°gina **/enhanced** integrada com v√≠deo (getUserMedia), APIs de pacientes/exames, salvar evolu√ß√£o/prescri√ß√£o, banner e modal de feedback + analytics.

```tsx
// client/src/EnhancedConsultation.tsx
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Banner, FeedbackModal, registerDebug, trackEvent } from './lib/telemed-ux';

function useQueryId(param: string, fallback = '123') {
  const [id] = useState(() => new URLSearchParams(location.search).get(param) || fallback);
  return id;
}

// ================= Video simples (getUserMedia) =================
function VideoPanel() {
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const streamRef = useRef<MediaStream | null>(null);

  async function start() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        await videoRef.current.play();
      }
      trackEvent('video_started', {});
    } catch (e) {
      alert('Falha ao acessar c√¢mera/microfone');
      trackEvent('video_error', { message: String(e) });
    }
  }
  function stop() {
    streamRef.current?.getTracks().forEach(t => t.stop());
    streamRef.current = null;
    if (videoRef.current) videoRef.current.srcObject = null;
    trackEvent('video_stopped', {});
  }

  return (
    <div>
      <div style={{ height: 320, borderRadius: 14, background: 'linear-gradient(135deg, rgba(162,210,255,.28), rgba(205,180,219,.26))', display: 'grid', placeItems: 'center', border: '1px dashed rgba(0,0,0,.08)', overflow: 'hidden' }}>
        <video ref={videoRef} style={{ width: '100%', height: '100%', objectFit: 'cover' }} muted playsInline />
      </div>
      <div style={{ display: 'flex', gap: 10, marginTop: 12 }}>
        <button className="btn primary" onClick={start}>Conectar</button>
        <button className="btn secondary" onClick={stop}>Desconectar</button>
      </div>
    </div>
  );
}

// ================= Tipos =================
interface PatientInfo {
  id: string;
  name: string;
  age: number;
  sex: 'M' | 'F' | 'O';
  weight?: string; height?: string;
  conditions?: string[];
  allergies?: string[];
  vitals?: { [k: string]: string };
}

interface ExamItem { id: string; name: string; kind: string; value?: string; url?: string }

// ================= P√°gina =================
export default function EnhancedConsultation() {
  const consultId = useQueryId('consultId', 'c-001');
  const patientId = useQueryId('patientId', 'p-001');

  const [patient, setPatient] = useState<PatientInfo | null>(null);
  const [exams, setExams] = useState<ExamItem[]>([]);
  const [chiefComplaint, setChief] = useState('Cefaleia e n√°usea h√° 2 dias');
  const [notes, setNotes] = useState('S: Dor latejante, piora com luz. O: PA 120/80, FC 78, afebril. A: Enxaqueca prov. P: Dipirona 500mg se dor.');
  const [rx, setRx] = useState('Dipirona 500mg, 1cp VO a cada 6-8h se dor.');

  const [openFeedback, setOpenFeedback] = useState(false);

  useEffect(() => {
    trackEvent('enhanced_opened', { consultId, patientId });
    registerDebug(() => setOpenFeedback(true), () => setOpenFeedback(false));
  }, [consultId, patientId]);

  // Carregar paciente
  useEffect(() => {
    fetch(`/api/patients/${patientId}`)
      .then(r => r.ok ? r.json() : Promise.reject(r.statusText))
      .then(setPatient)
      .catch(() => {
        // fallback demo
        setPatient({ id: patientId, name: 'Jo√£o Santos', age: 35, sex: 'M', weight: '68 kg', height: '1,75 m',
          conditions: ['HAS', 'Rinite al√©rgica'], allergies: ['Dipirona (leve)', 'Ibuprofeno'],
          vitals: { PA: '120/80', FC: '78 bpm', Temp: '36.7¬∞C', 'SpO‚ÇÇ': '98%' } });
      });
  }, [patientId]);

  // Carregar exames (ex.: Fleury ou sua API)
  useEffect(() => {
    fetch(`/api/patients/${patientId}/exams`)
      .then(r => r.ok ? r.json() : Promise.reject(r.statusText))
      .then((arr: ExamItem[]) => setExams(arr))
      .catch(() => setExams([
        { id: 'e1', name: 'Hemograma completo', kind: 'pdf', url: '#' },
        { id: 'e2', name: 'Glicemia jejum', kind: 'value', value: '89 mg/dL' },
        { id: 'e3', name: 'Perfil lip√≠dico', kind: 'status', value: 'OK' }
      ]));
  }, [patientId]);

  async function saveNotes() {
    const body = { chiefComplaint, notes };
    const r = await fetch(`/api/consults/${consultId}/notes`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
    if (r.ok) { trackEvent('notes_saved', { consultId }); alert('Evolu√ß√£o salva!'); }
    else { alert('Falha ao salvar evolu√ß√£o'); }
  }

  async function saveRx() {
    const body = { prescription: rx };
    const r = await fetch(`/api/consults/${consultId}/prescriptions`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
    if (r.ok) { trackEvent('prescription_saved', { consultId }); alert('Prescri√ß√£o salva!'); }
    else { alert('Falha ao salvar prescri√ß√£o'); }
  }

  async function generateAI() {
    const r = await fetch(`/api/ai/consult-notes`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ chiefComplaint, notes }) });
    if (r.ok) {
      const j = await r.json();
      setNotes(j.suggestion || notes);
      trackEvent('ai_notes_generated', {});
    } else {
      alert('Endpoint de IA n√£o encontrado; mantendo texto atual.');
    }
  }

  const vitals = useMemo(() => {
    const v = patient?.vitals || { PA: '120/80', FC: '78 bpm', Temp: '36.7¬∞C', 'SpO‚ÇÇ': '98%' };
    return Object.entries(v).map(([k, val]) => ({ k, v: val }));
  }, [patient]);

  return (
    <div className="page">
      <aside className="sidebar">
        <div className="brand"><div className="logo">TM</div> TeleMed</div>
        <div className="section-title">Menu</div>
        <nav className="nav">
          <a href="/">üè† Dashboard</a>
          <a href="/enhanced" className="active">ü©∫ Consulta Avan√ßada</a>
        </nav>
        <div className="section-title">A√ß√µes R√°pidas</div>
        <div className="group">
          <button className="btn primary" onClick={() => trackEvent('quick_new_consult', {})}>Nova Consulta</button>
          <button className="btn secondary" onClick={() => trackEvent('quick_new_patient', {})}>Novo Paciente</button>
        </div>
      </aside>

      <main>
        <Banner onFeedback={() => setOpenFeedback(true)} />

        <div className="topbar">
          <div className="search"><span>üîé</span><input placeholder="Buscar paciente, CPF, ID ou sintomas" /></div>
          <button className="btn secondary" onClick={() => (location.href = '/')}>Voltar ao Dashboard</button>
        </div>

        <section className="grid">
          {/* Coluna 1: V√≠deo */}
          <div className="card">
            <h3>Teleconsulta</h3>
            <p className="meta">Conecte √°udio/v√≠deo e compartilhe arquivos com o paciente</p>
            <VideoPanel />
          </div>

          {/* Coluna 2: Evolu√ß√£o/Prescri√ß√£o */}
          <div className="card">
            <h3>Evolu√ß√£o cl√≠nica</h3>
            <p className="meta">Modelo SOAP com IA opcional</p>
            <div className="group">
              <input className="input" value={chiefComplaint} onChange={e => setChief(e.target.value)} placeholder="Queixa principal" />
              <textarea className="textarea" value={notes} onChange={e => setNotes(e.target.value)} placeholder="Notas cl√≠nicas (S/O/A/P)" />
            </div>
            <div style={{ height: 8 }} />
            <h3>Prescri√ß√£o</h3>
            <p className="meta">Medicamentos / posologia</p>
            <textarea className="textarea" value={rx} onChange={e => setRx(e.target.value)} placeholder="Prescri√ß√£o" />
            <div style={{ display: 'flex', gap: 10, marginTop: 12, flexWrap: 'wrap' }}>
              <button className="btn primary" onClick={saveNotes}>Salvar Evolu√ß√£o</button>
              <button className="btn secondary" onClick={generateAI}>Gerar via IA</button>
              <button className="btn secondary" onClick={saveRx}>Salvar Prescri√ß√£o</button>
            </div>
          </div>

          {/* Coluna 3: Paciente/Exames */}
          <div className="card">
            <div className="patientCard">
              <div className="avatar">{(patient?.name || 'J S').split(' ').map(p => p[0]).slice(0, 2).join('')}</div>
              <div>
                <strong>{patient?.name || 'Jo√£o Santos'}</strong>
                <div className="meta">{patient?.age || 35} anos ‚Ä¢ {patient?.sex || 'M'} ‚Ä¢ {patient?.weight || '68 kg'} ‚Ä¢ {patient?.height || '1,75 m'}</div>
              </div>
            </div>

            {patient?.conditions && (
              <div className="tags" style={{ marginBottom: 12 }}>
                {patient.conditions.map(c => <span key={c} className="tag">{c}</span>)}
              </div>
            )}

            <h3>Dados vitais</h3>
            <div className="vitals">
              {vitals.map(v => (
                <div key={v.k} className="vital"><div className="meta">{v.k}</div><div style={{ fontWeight: 700 }}>{v.v}</div></div>
              ))}
            </div>
            <div style={{ height: 12 }} />

            {patient?.allergies && (
              <>
                <h3>Alergias</h3>
                <div className="list">
                  {patient.allergies.map(a => <div key={a} className="item"><span>{a}</span><span className="pill">registrada</span></div>)}
                </div>
                <div style={{ height: 12 }} />
              </>
            )}

            <h3>Exames recentes</h3>
            <div className="list">
              {exams.map(ex => (
                <div key={ex.id} className="item">
                  <span>{ex.name}</span>
                  {ex.kind === 'pdf' && ex.url && <a className="pill" href={ex.url} target="_blank">PDF</a>}
                  {ex.kind === 'value' && <span className="pill">{ex.value}</span>}
                  {ex.kind === 'status' && <span className="pill">{ex.value || 'ok'}</span>}
                </div>
              ))}
            </div>
          </div>
        </section>
      </main>

      <FeedbackModal open={openFeedback} onClose={() => setOpenFeedback(false)} />

      {/* estilos compartilhados com o dashboard */}
      <style>{`
        :root{ --bg:#F6F8FB; --text:#1F2937; --muted:#6B7280; --card:#FFFFFF; --shadow:0 2px 8px rgba(0,0,0,.05); --radius:12px; --pad:24px; --primary:#A2D2FF; --primary-600:#8AB8E6; --lavender:#CDB4DB; --border:1px solid rgba(0,0,0,.06) }
        *{box-sizing:border-box} html,body,#root{height:100%}
        body{margin:0;font-family:Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;color:var(--text);background:linear-gradient(180deg,#F9FBFF 0%, var(--bg) 100%)}
        .page{display:flex}
        .sidebar{position:fixed;inset:0 auto 0 0;width:272px;background:#fff;box-shadow:var(--shadow);border-right:var(--border);padding:20px;display:flex;flex-direction:column;gap:16px}
        .brand{display:flex;align-items:center;gap:10px;font-weight:700;font-size:18px}
        .logo{width:34px;height:34px;display:grid;place-items:center;border-radius:10px;background:var(--primary);color:#0F172A;font-weight:700}
        .section-title{font-size:12px;text-transform:uppercase;letter-spacing:.08em;color:var(--muted);margin:8px 0 4px}
        .nav{display:flex;flex-direction:column;gap:6px}
        .nav a{display:flex;align-items:center;gap:10px;padding:10px 12px;border-radius:10px;text-decoration:none;color:var(--text);transition:transform .15s ease, background .15s ease, opacity .15s ease}
        .nav a:hover{background:rgba(162,210,255,.18);opacity:.9}
        .nav a.active{background:rgba(162,210,255,.25);border:1px solid rgba(162,210,255,.6)}
        main{margin-left:272px;padding:32px;display:flex;flex-direction:column;gap:24px}
        .topbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap}
        .search{flex:1;min-width:260px;display:flex;align-items:center;gap:10px;background:#fff;border-radius:12px;padding:10px 14px;box-shadow:var(--shadow);border:var(--border)}
        .search input{border:none;outline:none;width:100%;font-size:14px}
        .btn{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border-radius:12px;border:1px solid transparent;cursor:pointer;font-weight:600;transition:opacity .15s ease, transform .15s ease}
        .btn:hover{opacity:.9}
        .btn.primary{background:var(--primary);border-color:var(--primary)}
        .btn.primary:hover{background:var(--primary-600)}
        .btn.secondary{background:transparent;border:1px solid var(--primary);color:#0F172A}
        .grid{display:grid;grid-template-columns:1.6fr 1.4fr 1.1fr;gap:24px}
        .card{background:var(--card);border-radius:var(--radius);box-shadow:var(--shadow);border:var(--border);padding:var(--pad)}
        .card h3{margin:0 0 8px}
        .meta{color:var(--muted);font-size:12px;margin:0 0 12px}
        .group{display:flex;gap:12px;flex-wrap:wrap}
        .input,.textarea{width:100%;border:1px solid rgba(0,0,0,.08);border-radius:12px;padding:12px 14px;font-size:14px;background:#fff;box-shadow:0 1px 0 rgba(0,0,0,.02) inset}
        .textarea{min-height:110px;resize:vertical}
        .tags{display:flex;flex-wrap:wrap;gap:8px}
        .tag{padding:6px 10px;border-radius:999px;background:rgba(162,210,255,.22);border:1px solid rgba(162,210,255,.45);font-size:12px}
        .patientCard{display:flex;gap:12px;align-items:center;margin-bottom:10px}
        .avatar{width:46px;height:46px;border-radius:999px;background:linear-gradient(135deg,#E0F2FE,#EDE9FE);display:grid;place-items:center;font-weight:700}
        .pill{border-radius:999px;border:1px solid rgba(0,0,0,.08);padding:6px 10px;background:#fff;font-size:12px}
        .vitals{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
        .vital{background:#fff;border:1px solid rgba(0,0,0,.06);border-radius:10px;padding:10px}
        .list{display:flex;flex-direction:column;gap:8px}
        .list .item{display:flex;justify-content:space-between;gap:8px}
        @media (max-width:1200px){ .grid{grid-template-columns:1fr} }
      `}</style>
    </div>
  );
}
```

---

## 3) **Backend (Express/TS)** ‚Äì adicionar rotas no servidor

Cole ap√≥s a cria√ß√£o do `app` em `server/index.ts` (ou extraia para `server/routes/*.ts`). S√£o **stubs** funcionais para testar agora.

```ts
// ===== Rotas de Pacientes =====
app.get('/api/patients/:id', (req, res) => {
  const { id } = req.params;
  // Retorno de exemplo; troque para seu banco/API
  res.json({
    id,
    name: 'Jo√£o Santos',
    age: 35,
    sex: 'M',
    weight: '68 kg',
    height: '1,75 m',
    conditions: ['HAS', 'Rinite al√©rgica'],
    allergies: ['Dipirona (leve)', 'Ibuprofeno'],
    vitals: { PA: '120/80', FC: '78 bpm', Temp: '36.7¬∞C', 'SpO‚ÇÇ': '98%' },
  });
});

app.get('/api/patients/:id/exams', (req, res) => {
  const { id } = req.params;
  // Integre aqui com Fleury/Outro provedor
  res.json([
    { id: `${id}-e1`, name: 'Hemograma completo', kind: 'pdf', url: 'https://example.com/exams/hemograma.pdf' },
    { id: `${id}-e2`, name: 'Glicemia jejum', kind: 'value', value: '89 mg/dL' },
    { id: `${id}-e3`, name: 'Perfil lip√≠dico', kind: 'status', value: 'OK' },
  ]);
});

// ===== Rotas de Consulta (salvar evolu√ß√£o/prescri√ß√£o) =====
app.post('/api/consults/:id/notes', (req, res) => {
  const { id } = req.params;
  const body = req.body;
  console.log('notes@consult', id, body);
  // TODO: persistir em DB
  res.json({ ok: true });
});

app.post('/api/consults/:id/prescriptions', (req, res) => {
  const { id } = req.params;
  const body = req.body;
  console.log('rx@consult', id, body);
  // TODO: persistir em DB
  res.json({ ok: true });
});

// ===== IA (stub) =====
app.post('/api/ai/consult-notes', async (req, res) => {
  const { chiefComplaint, notes } = req.body || {};
  // Aqui voc√™ pode chamar seu cliente OpenAI interno j√° inicializado no projeto
  // Por enquanto, devolvemos uma sugest√£o simples para demo.
  const suggestion = `Sugerido (IA):\nS: ${chiefComplaint}.\nO: Exame f√≠sico sem altera√ß√µes relevantes.\nA: Prov√°vel enxaqueca.\nP: Hidrata√ß√£o, analg√©sico, repouso, reavalia√ß√£o se piora.`;
  res.json({ suggestion });
});
```

---

### Como ligar tudo em 3 passos

1. **Crie os arquivos** acima nas pastas indicadas.
2. No `client/src/App.tsx`, adicione a rota:

```tsx
import React from 'react';
import { Route, Switch } from 'wouter';
import DashboardTeleMed from './DashboardTeleMed';
import EnhancedConsultation from './EnhancedConsultation';

export default function App(){
  return (
    <Switch>
      <Route path="/" component={DashboardTeleMed} />
      <Route path="/enhanced" component={EnhancedConsultation} />
    </Switch>
  );
}
```

3. **Rodar**:

```bash
pkill -f node 2>/dev/null || true
npm run dev
# Abra /enhanced
```

> Dica: com o projeto aberto, digite no console do navegador `telemedDebug.testModal()` para abrir a modal, `telemedDebug.testBanner()` para reexibir o banner.

Se quiser, eu adapto o `GET /api/patients/:id` para **o seu JSON real** (manda o shape) e tamb√©m troco o `VideoPanel` por **Daily|Twilio|Vonage** com as chaves que voc√™ usar.
