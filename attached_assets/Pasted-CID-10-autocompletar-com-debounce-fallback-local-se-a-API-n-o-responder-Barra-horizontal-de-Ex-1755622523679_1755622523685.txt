CID-10 autocompletar (com debounce + fallback local se a API n√£o responder).

Barra horizontal de Exames comuns (rol√°vel) + corre√ß√£o da ‚Äúaba Exames em branco‚Äù movendo o mesmo DOM do segmento para a aba.

Cole os trechos abaixo nos lugares indicados. (Mantive tudo o que voc√™ j√° tem; s√≥ adiciona/ajusta.)

1) CSS ‚Äî chips rol√°veis de Exames

No <style>, adicione:

/* Barra horizontal de exames */
.examBar{
  display:flex; gap:8px; overflow:auto; padding:8px; background:#fff;
  border:var(--line); border-radius:10px; white-space:nowrap; scroll-behavior:smooth;
}
.examChip{
  display:inline-flex; align-items:center; gap:6px; padding:8px 10px; border:var(--line);
  border-radius:999px; background:#f8fafc; cursor:pointer; font-size:14px;
}
.examChip:hover{ background:#eef2ff; border-color:#c7d2fe }
.examBar::-webkit-scrollbar{ height:8px } .examBar::-webkit-scrollbar-thumb{ background:#cbd5e1; border-radius:99px }

2) HTML ‚Äî barra de Exames dentro do segmento ‚ÄúExames‚Äù

No bloco segmento de exames (em #seg-exams), logo acima de ‚ÄúTemplates comuns‚Äù, cole:

<div style="margin-bottom:10px">
  <div style="font-weight:600;margin-bottom:8px">Exames mais comuns</div>
  <div class="examBar" id="examBar"></div>
</div>


(N√£o mexa no resto ‚Äî os ‚ÄúTemplates comuns‚Äù continuam logo abaixo.)

3) JS ‚Äî CID-10 + barra de Exames + sincronizar aba ‚ÄúExames‚Äù

No <script>, adicione/ajuste estes blocos.

3.1 CID-10 com debounce + fallback

Coloque perto do topo, ap√≥s a constante API e utilit√°rios:

/** ===== CID-10 autocomplete ===== */
const CID_FALLBACK = [
  { code:'F41.1', name:'Transtorno de ansiedade generalizada' },
  { code:'J06.9', name:'Infec√ß√µes agudas das vias a√©reas superiores, n√£o especificada' },
  { code:'M54.5', name:'Dor lombar' },
  { code:'R51',   name:'Cefaleia' },
  { code:'I10',   name:'Hipertens√£o essencial (prim√°ria)' },
  { code:'E11.9', name:'Diabetes mellitus tipo 2 sem complica√ß√µes' },
  { code:'J45.9', name:'Asma, n√£o especificada' },
];

let cidAbort = null, cidTimer = null;
const dxInput = $('#dx'), cidList = $('#cid10');

function normalizeCidList(list){
  // aceita [{code,name}] ou [{cid,descricao}] etc.
  return (list||[]).map(x=>{
    const code = x.code || x.cid || x.codigo || '';
    const name = x.name || x.term || x.descricao || x.descr || '';
    return code && name ? {code, name} : null;
  }).filter(Boolean);
}
async function searchCid(q){
  if (!q || q.length < 2) return normalizeCidList(CID_FALLBACK);
  try{
    if (cidAbort) cidAbort.abort();
    cidAbort = new AbortController();
    const r = await fetch(API.cid10(q), { signal: cidAbort.signal });
    if (!r.ok) throw 0;
    const data = await r.json().catch(()=>[]);
    const out = normalizeCidList(data);
    return out.length ? out : normalizeCidList(CID_FALLBACK);
  }catch{
    return normalizeCidList(CID_FALLBACK);
  }
}
function renderCidOptions(items){
  cidList.innerHTML = items.map(i=>`<option value="${i.code} ‚Äî ${i.name}"></option>`).join('');
}

dxInput.addEventListener('input', e=>{
  const q = e.target.value.trim();
  clearTimeout(cidTimer);
  cidTimer = setTimeout(async ()=>{
    const items = await searchCid(q);
    renderCidOptions(items);
  }, 250);
});
// 1¬™ carga
renderCidOptions(CID_FALLBACK);


Isso preenche o <datalist id="cid10"> conforme o usu√°rio digita em Hip√≥tese diagn√≥stica; se a rota /api/cid10/search estiver fora/indispon√≠vel, cai no fallback.

3.2 Barra horizontal de Exames

Adicione ap√≥s o c√≥digo das abas/segmentos:

/** ===== Exames comuns (chips horizontais) ===== */
const COMMON_EXAMS = [
  { n:'Hemograma completo',       inst:'Jejum 8h',        icon:'ü©∏' },
  { n:'Glicemia de jejum',        inst:'Jejum',           icon:'üçé' },
  { n:'Perfil lip√≠dico',          inst:'',                icon:'üíâ' },
  { n:'TSH',                      inst:'Sem jejum',       icon:'ü¶ã' },
  { n:'T4 livre',                 inst:'Sem jejum',       icon:'ü¶ã' },
  { n:'Creatinina',               inst:'Jejum opcional',  icon:'üß™' },
  { n:'Ureia',                    inst:'Jejum opcional',  icon:'üß™' },
  { n:'Urina tipo 1',             inst:'1¬™ urina manh√£',  icon:'üöΩ' },
  { n:'PCR',                      inst:'Sem jejum',       icon:'üß´' },
  { n:'Vitamina D',               inst:'Sem jejum',       icon:'‚òÄÔ∏è' },
  { n:'Raio-X de t√≥rax (PA)',     inst:'Insp. profunda',  icon:'ü©ª' },
  { n:'Eletrocardiograma',        inst:'Repouso',         icon:'‚ù§Ô∏è' },
  { n:'PSA',                      inst:'‚â• 50 anos',       icon:'üßë‚Äç‚öïÔ∏è' },
];

function renderExamBar(){
  const bar = $('#examBar');
  if (!bar) return;
  bar.innerHTML = COMMON_EXAMS.map(e=>(
    `<button class="examChip" type="button" data-name="${e.n}" data-inst="${e.inst}">
      <span>${e.icon}</span> ${e.n}
    </button>`
  )).join('');
  bar.querySelectorAll('.examChip').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      $('#exName').value  = btn.dataset.name || '';
      $('#exNotes').value = btn.dataset.inst  || '';
      $('#exPriority').value = 'Rotina';
      // Adiciona direto (se preferir s√≥ preencher, comente a linha abaixo)
      $('#exAdd').click();
      // garante que o usu√°rio ‚Äúv√™‚Äù o pedido sendo adicionado
      $('#examList').scrollIntoView({behavior:'smooth', block:'nearest'});
    });
  });
}
renderExamBar();

3.3 ‚ÄúAba Exames‚Äù vazia ‚Üí mover o mesmo DOM do segmento

No seu handler das abas principais (voc√™ j√° tem algo como $$('.tab').forEach(...)), troque a parte que s√≥ fazia hidden=true/false por este switch (mant√©m a mesma API visual, mas move o bloco #seg-exams para a aba quando necess√°rio e devolve ao Atendimento ao sair):

/** ===== Abas principais (mover DOM de Exames) ===== */
$$('.tab').forEach(t=>t.addEventListener('click', ()=>{
  $$('.tab').forEach(x=>x.classList.remove('active'));
  t.classList.add('active');

  const which = t.dataset.tab;
  $('#tab-chat').hidden     = which!=='chat';
  $('#tab-care').hidden     = which!=='care';
  $('#tab-exams').hidden    = which!=='exams';
  $('#tab-receitas').hidden = which!=='receitas';

  // move o bloco de exames (um √∫nico DOM) entre segmento e aba
  const segEx = $('#seg-exams');
  if (which==='exams') {
    if (segEx && segEx.parentElement !== $('#tab-exams')) {
      $('#tab-exams').innerHTML = ''; // limpa espelhos antigos
      $('#tab-exams').appendChild(segEx);
      segEx.hidden = false;
    }
  } else {
    if (segEx && segEx.parentElement !== $('#tab-care')) {
      $('#seg-plan').insertAdjacentElement('beforebegin', segEx); // volta para o atendimento
      segEx.hidden = true; // fica oculto dentro do atendimento at√© clicar no segmento "Exames"
    }
  }
}));


E, para o segmentador interno (os bot√µes ‚ÄúConduta / Exames‚Äù), garanta que seu listener j√° faz:

/** ===== Segmentador Conduta/Exames dentro do Atendimento ===== */
$$('.seg').forEach(s=>s.addEventListener('click', ()=>{
  $$('.seg').forEach(x=>x.classList.remove('active'));
  s.classList.add('active');
  $('#seg-plan').hidden  = s.dataset.seg!=='plan';
  $('#seg-exams').hidden = s.dataset.seg!=='exams';
}));


Assim, a ‚Äúaba Exames‚Äù n√£o fica mais vazia: ela usa o mesmo conte√∫do do segmento (sem duplicar handlers).

3.4 Fun√ß√µes utilit√°rias de Exames (se ainda n√£o tiver)

Se o seu #exAdd j√° adiciona na lista, mantenha. Caso n√£o exista, use este m√≠nimo:

function addExamToList(name, prio, notes){
  const box = $('#examList');
  const item = document.createElement('div');
  item.style.cssText = 'padding:8px;border:1px solid rgba(0,0,0,.08);border-radius:10px;margin:6px 0;background:#fff';
  item.innerHTML = `<b>${name}</b> <span class="pill">${prio}</span><br><small>${notes||''}</small>`;
  if (box.textContent.includes('Nenhum exame')) box.innerHTML='';
  box.appendChild(item);
}
$('#exAdd').addEventListener('click', ()=>{
  const n = $('#exName').value.trim(); if(!n) return;
  addExamToList(n, $('#exPriority').value, $('#exNotes').value.trim());
  $('#exName').value=''; $('#exNotes').value='';
});