1) package.json — ajustar Build/Start para produção

Hoje o start aponta para server.js (que não existe) e não há passo de build.
Troque para compilar TS → dist/ e rodar o servidor compilado.

{
  "name": "telemed-hibrido",
  "version": "1.0.0",
  "main": "dist/server/index.js",
  "type": "commonjs",
  "engines": { "node": "20.x" },
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "postbuild": "CANONICAL_BASE_URL=${CANONICAL_BASE_URL:-http://localhost:5000} node scripts/build-sitemap.cjs",
    "start": "node dist/server/index.js",
    "dev": "node start-dev.js",

    "test:contracts": "node scripts/contract-tests.cjs",
    "verify:auth": "node scripts/verify-auth.cjs",
    "test:a11y": "node scripts/a11y.cjs",
    "test:all": "node scripts/run-all-tests.js",
    "smoke:api": "node scripts/contract-tests.cjs && echo '✓ APIs funcionando'",
    "smoke:full": "npm run test:contracts && npm run verify:auth && echo '✓ Smoke tests OK'",
    "verify\\:routes": "node scripts/verify-routes.cjs",
    "verify:routes": "node scripts/verify-routes.cjs",
    "test:canonical": "node scripts/test-canonical-routes.js",
    "test:a11y:canonical": "node scripts/a11y-canonical.cjs",
    "test:perf:canonical": "node scripts/perf-canonical.js",
    "canonical:hygiene": "node scripts/canonical-hygiene.js",
    "codemod:routes": "node scripts/codemod-canonical-routes.cjs",
    "test:frontend:redirects": "node scripts/test-frontend-redirects.js"
  }
}


Se preferir não compilar, dá para usar tsx no start ("start": "tsx server/index.ts"), mas compilar é o caminho mais estável no Render.

2) server/index.ts — estático com caminho robusto + rotas canônicas

Seu server atual usa __dirname + '../public'. Compilado, isso vira dist/server → apontaria para dist/public (que não existe).
Troque para process.cwd() e adicione o snapshot das canônicas + redirects.

Substitua inteiro por este:

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import compression from 'compression';
import path from 'path';

const app = express();

// Trust proxy (Render) e middlewares
app.set('trust proxy', 1);
app.use(cors({ origin: true, credentials: true }));
app.use(express.json({ limit: '2mb' }));
app.use(compression());

// === Static ===
const PUBLIC_DIR = path.resolve(process.cwd(), 'public');
app.use(express.static(PUBLIC_DIR, { maxAge: '7d', etag: true }));
app.use((req, _res, next) => {
  // HTML sem cache agressivo
  if (!path.extname(req.path)) req.headers['cache-control'] = 'public, max-age=0';
  next();
});

// Health / ping
app.get('/health', (_req, res) =>
  res.json({ ok: true, env: process.env.NODE_ENV || 'development', time: new Date().toISOString() })
);
app.get('/api/ping', (_req, res) => res.json({ pong: true }));

// Helper para servir canônicas a partir de /public
const serveCanonical = (rel: string) => (_req: any, res: any) =>
  res.sendFile(path.join(PUBLIC_DIR, rel));

// --- Rotas CANÔNICAS ---
app.get('/', (_req, res) => res.redirect(301, '/agenda'));

app.get('/agenda',           serveCanonical('preview/agenda-avancada.html')); // nova agenda
app.get('/consulta',         serveCanonical('preview/enhanced-teste.html'));
app.get('/dashboard',        serveCanonical('preview/dashboard.html'));
app.get('/demo-responsivo',  serveCanonical('preview/demo-responsivo.html'));
app.get('/sala-de-espera',   serveCanonical('preview/sala-de-espera.html'));

app.get('/medico',           serveCanonical('preview/perfil-medico.html'));
app.get('/paciente',         serveCanonical('preview/mobile.html'));

app.get('/como-funciona',    serveCanonical('preview/como-funciona.html'));
app.get('/dr-ai',            serveCanonical('preview/doutor-ai.html'));

app.get('/cadastro',         serveCanonical('cadastro.html'));
app.get('/login',            serveCanonical('preview/login.html'));

app.get('/registro-saude',   serveCanonical('preview/registro-saude.html'));
app.get('/privacidade',      serveCanonical('preview/privacidade.html'));
app.get('/precos',           serveCanonical('preview/precos.html'));
app.get('/recuperar-senha',  serveCanonical('preview/recuperar-senha.html'));
app.get('/feedback-medico',  serveCanonical('preview/feedback-medico.html'));

// --- Redirects de aliases/legados → canônicas (preservando querystring) ---
const r301 = (to: string) => (req: any, res: any) => {
  const qs = req.url.includes('?') ? req.url.slice(req.url.indexOf('?')) : '';
  res.redirect(301, to + qs);
};

app.get(['/dev/agenda','/agenda2','/agenda-legacy'], r301('/agenda'));
app.get(['/enhanced','/enhanced-consultation','/enhanced-teste','/enhanced-system'], r301('/consulta'));
app.get(['/doctor-dashboard','/dashboard-teste','/dashboard-teste.html'], r301('/dashboard'));
// opcional: backlinks antigos
app.get(['/video-consultation'], r301('/consulta'));
// páginas antigas de pacientes
app.get(['/pacientes','/pacientes.html'], r301('/dashboard'));

// Porta
const PORT = Number(process.env.PORT) || 5000;
const HOST = '0.0.0.0';
app.listen(PORT, HOST, () => {
  console.log('✅ Express pronto em', PORT);
  console.log('🗂️  static:', PUBLIC_DIR);
});
