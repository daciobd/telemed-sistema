Console est√° online, status verdinho e UI m√≠nima funcionando. üëè
Pra deixar redondinho (us√°vel no dia a dia e seguro), eu faria estes ajustes r√°pidos:

5 melhorias expressas

Habilitar bot√£o conforme digita (+ atalho Ctrl/‚åò+Enter).

Bala de status (online/off) com cor, e mensagens claras para 401/403/428.

Scrub de PII no cliente (extra-cautela) + limite de tamanho.

Hist√≥rico curto (√∫ltimas 5 perguntas) com reenvio em 1 clique.

√Årea de resposta melhor (copiar, limpar).

Patch direto (cole no seu ai-console.tsx)

Troque/adicione s√≥ estes trechos:

// topo
const MAX_LEN = 2000;
const sanitize = (s: string) =>
  s
    .replace(/\b\d{3}\.?\d{3}\.?\d{3}-?\d{2}\b/g, "[CPF]")
    .replace(/\b\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}\b/g, "[CNPJ]")
    .replace(/\+?\d{2}\s?\(?\d{2}\)?[\s-]?\d{4,5}[\s-]?\d{4}/g, "[PHONE]")
    .replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi, "[EMAIL]");

const [history, setHistory] = useState<string[]>([]);

function isValid(q: string) {
  return q.trim().length >= 6 && q.trim().length <= MAX_LEN;
}

// textarea
<textarea
  className="w-full h-36 p-3 border rounded"
  placeholder="Ex.: Explique op√ß√µes de autentica√ß√£o segura no TeleMed."
  value={question}
  onChange={(e) => setQuestion(e.target.value)}
  onKeyDown={(e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === "Enter" && isValid(question) && !pending) ask();
  }}
/>
<div className="text-xs text-gray-500">
  {question.trim().length}/{MAX_LEN}
</div>

// bot√£o
<button
  onClick={ask}
  disabled={pending || !isValid(question)}
  className="px-4 py-2 rounded bg-blue-600 text-white disabled:opacity-60"
>
  {pending ? "Perguntando‚Ä¶" : "Perguntar ao Agent (Ctrl/‚åò+Enter)"}
</button>

// fun√ß√£o ask()
const q = question.trim();
if (!isValid(q)) return;
const r = await fetch("/api/ai-agent/ask", {
  method: "POST",
  credentials: "include",
  headers: { "Content-Type": "application/json", "x-csrf": "1" },
  body: JSON.stringify({ question: sanitize(q) }),
});
...
const data = await r.json();
setAnswer(data.answer ?? JSON.stringify(data, null, 2));
setHistory((h) => [q, ...h].slice(0, 5));

// abaixo da √°rea de resposta, liste o hist√≥rico
{history.length > 0 && (
  <section className="p-3 rounded border bg-gray-50">
    <div className="font-medium mb-2 text-sm">√öltimas perguntas</div>
    <ul className="space-y-1">
      {history.map((h, i) => (
        <li key={i} className="flex items-center justify-between gap-2 text-sm">
          <span className="truncate">{h}</span>
          <button
            className="text-blue-600 underline"
            onClick={() => setQuestion(h)}
            title="Reutilizar"
          >
            usar
          </button>
        </li>
      ))}
    </ul>
  </section>
)}

Dica visual rel√¢mpago

Deixe o ‚ÄúStatus do Agent: online‚Äù com um p√≠lula verde (bg-green-100 text-green-700 px-2 py-0.5 rounded-full).

Para erros: mostre mensagens humanizadas:

401 ‚Äúfa√ßa login‚Äù

403 ‚ÄúIA desabilitada ou sem permiss√£o (verifique AI_ENABLED e papel)‚Äù

428 ‚Äúconsentimento necess√°rio (autorize no banner)‚Äù

Com isso, o /ai-console vira uma ferramenta de trabalho mesmo, com seguran√ßa (scrub + limite), UX boa (atalho, habilita/desabilita) e rastreabilidade (hist√≥rico curto). Quer que eu te passe a vers√£o com aba ‚ÄúGerar C√≥digo‚Äù tamb√©m?

Voc√™ disse:
sim
O ChatGPT disse:
Pensou por 13s

perfeito! segue a vers√£o do /ai-console com duas abas: Perguntar (Q&A) e Gerar C√≥digo.
√â s√≥ substituir o arquivo client/src/pages/ai-console.tsx pelo c√≥digo abaixo.

// client/src/pages/ai-console.tsx
import { useEffect, useMemo, useState } from "react";

/** ====== util ====== */
const MAX_LEN = 2000;
const sanitize = (s: string) =>
  s
    .replace(/\b\d{3}\.?\d{3}\.?\d{3}-?\d{2}\b/g, "[CPF]")
    .replace(/\b\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}\b/g, "[CNPJ]")
    .replace(/\+?\d{2}\s?\(?\d{2}\)?[\s-]?\d{4,5}[\s-]?\d{4}/g, "[PHONE]")
    .replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi, "[EMAIL]");

async function postJSON<T>(url: string, body: unknown): Promise<T> {
  const r = await fetch(url, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json", "x-csrf": "1" },
    body: JSON.stringify(body),
  });
  if (r.status === 401) throw new Error("N√£o autenticado");
  if (r.status === 403) throw new Error("IA desabilitada ou sem permiss√£o");
  if (r.status === 428) throw new Error("Consentimento necess√°rio");
  if (!r.ok) throw new Error(`Erro ${r.status}`);
  return r.json() as Promise<T>;
}

function isValid(s: string) {
  const t = s.trim();
  return t.length >= 6 && t.length <= MAX_LEN;
}

function Pill({ ok, text }: { ok: boolean; text: string }) {
  const cls = ok
    ? "bg-green-100 text-green-700"
    : "bg-red-100 text-red-700";
  return (
    <span className={`px-2 py-0.5 rounded-full text-xs ${cls}`}>{text}</span>
  );
}

/** ====== page ====== */
export default function AIConsolePage() {
  const [statusOk, setStatusOk] = useState<boolean | null>(null);
  const [statusErr, setStatusErr] = useState<string>("");

  const [mode, setMode] = useState<"ask" | "code">("ask");
  const [pending, setPending] = useState(false);

  // Q&A
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [history, setHistory] = useState<string[]>([]);
  const qCount = useMemo(() => question.trim().length, [question]);

  // Codegen
  const [spec, setSpec] = useState("");
  const [language, setLanguage] = useState<"ts" | "tsx" | "js">("ts");
  const [notes, setNotes] = useState("React + fetch + seguran√ßa; usar React Query quando √∫til");
  const [code, setCode] = useState("");
  const sCount = useMemo(() => spec.trim().length, [spec]);

  useEffect(() => {
    fetch("/api/ai-agent/status", { credentials: "include" })
      .then(async r => {
        if (!r.ok) throw r;
        return r.json();
      })
      .then(() => setStatusOk(true))
      .catch(async (e) => {
        setStatusOk(false);
        try {
          const txt = e instanceof Response ? `Status ${e.status}` : (e?.message || "Falha ao verificar status");
          setStatusErr(txt);
        } catch {
          setStatusErr("Falha ao verificar status");
        }
      });
  }, []);

  async function doAsk() {
    if (!isValid(question) || pending) return;
    setPending(true); setAnswer(""); setCode("");
    try {
      const data = await postJSON<{ answer?: string }>("/api/ai-agent/ask", {
        question: sanitize(question.trim()),
      });
      setAnswer(data.answer ?? "(sem conte√∫do)");
      setHistory((h) => [question.trim(), ...h].slice(0, 5));
    } catch (e: any) {
      setAnswer(`‚ö†Ô∏è ${e.message || "Erro ao consultar o Agent"}`);
    } finally {
      setPending(false);
    }
  }

  async function doGenerate() {
    if (!isValid(spec) || pending) return;
    setPending(true); setCode(""); setAnswer("");
    try {
      const data = await postJSON<{ code?: string; notes?: string }>(
        "/api/ai-agent/generate-code",
        { specification: sanitize(spec.trim()), language, notes }
      );
      setCode(data.code || data.notes || "(sem conte√∫do)");
    } catch (e: any) {
      setCode(`‚ö†Ô∏è ${e.message || "Erro ao gerar c√≥digo"}`);
    } finally {
      setPending(false);
    }
  }

  const copy = async (txt: string) => {
    try { await navigator.clipboard.writeText(txt); } catch {}
  };

  return (
    <main className="max-w-4xl mx-auto p-6 space-y-5">
      <h1 className="text-3xl font-bold">TeleMed AI Console</h1>

      <section className="p-4 rounded border bg-gray-50 text-sm flex items-center gap-3">
        <span className="font-semibold">Status do Agent:</span>
        {statusOk === null && <Pill ok={true} text="verificando‚Ä¶" />}
        {statusOk === true && <Pill ok={true} text="online" />}
        {statusOk === false && <Pill ok={false} text={`offline (${statusErr})`} />}
        <span className="text-gray-500">
          Dicas: login de <strong>m√©dico</strong>, consentimento dado, <code>AI_ENABLED=true</code>.
        </span>
      </section>

      {/* Tabs */}
      <div className="flex gap-2">
        <button
          className={`px-3 py-1 rounded ${mode === "ask" ? "bg-blue-600 text-white" : "bg-gray-200"}`}
          onClick={() => setMode("ask")}
        >
          Perguntar (Q&A)
        </button>
        <button
          className={`px-3 py-1 rounded ${mode === "code" ? "bg-blue-600 text-white" : "bg-gray-200"}`}
          onClick={() => setMode("code")}
        >
          Gerar C√≥digo
        </button>
      </div>

      {/* ASK */}
      {mode === "ask" && (
        <section className="space-y-3">
          <label className="block text-sm font-medium">Pergunta (sem PII)</label>
          <textarea
            className="w-full h-36 p-3 border rounded"
            placeholder="Ex.: Explique op√ß√µes de autentica√ß√£o segura no TeleMed."
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            onKeyDown={(e) => {
              if ((e.ctrlKey || e.metaKey) && e.key === "Enter" && isValid(question) && !pending) doAsk();
            }}
          />
          <div className="text-xs text-gray-500">{qCount}/{MAX_LEN}</div>
          <button
            onClick={doAsk}
            disabled={pending || !isValid(question)}
            className="px-4 py-2 rounded bg-blue-600 text-white disabled:opacity-60"
          >
            {pending ? "Perguntando‚Ä¶" : "Perguntar ao Agent (Ctrl/‚åò+Enter)"}
          </button>

          {(answer || history.length > 0) && (
            <div className="grid md:grid-cols-2 gap-4">
              <section className="p-4 rounded border bg-white">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="font-medium">Resposta</h3>
                  {answer && (
                    <button className="text-blue-600 underline text-sm" onClick={() => copy(answer)}>
                      copiar
                    </button>
                  )}
                </div>
                <pre className="whitespace-pre-wrap text-sm">{answer}</pre>
              </section>

              <section className="p-4 rounded border bg-gray-50">
                <div className="font-medium mb-2">√öltimas perguntas</div>
                <ul className="space-y-1 text-sm">
                  {history.map((h, i) => (
                    <li key={i} className="flex items-center justify-between gap-2">
                      <span className="truncate">{h}</span>
                      <button className="text-blue-600 underline" onClick={() => setQuestion(h)}>
                        usar
                      </button>
                    </li>
                  ))}
                </ul>
              </section>
            </div>
          )}
        </section>
      )}

      {/* CODEGEN */}
      {mode === "code" && (
        <section className="space-y-3">
          <label className="block text-sm font-medium">Especifica√ß√£o (sem PII)</label>
          <textarea
            className="w-full h-36 p-3 border rounded"
            placeholder='Ex.: "Criar hook useAppointments com React Query chamando GET /api/appointments"'
            value={spec}
            onChange={(e) => setSpec(e.target.value)}
            onKeyDown={(e) => {
              if ((e.ctrlKey || e.metaKey) && e.key === "Enter" && isValid(spec) && !pending) doGenerate();
            }}
          />
          <div className="flex items-center justify-between text-sm">
            <div className="text-xs text-gray-500">{sCount}/{MAX_LEN}</div>
            <div className="flex items-center gap-2">
              <label className="text-sm">Linguagem:</label>
              <select
                className="border rounded px-2 py-1"
                value={language}
                onChange={(e) => setLanguage(e.target.value as any)}
              >
                <option value="ts">TypeScript</option>
                <option value="tsx">TSX (React)</option>
                <option value="js">JavaScript</option>
              </select>
            </div>
          </div>

          <label className="block text-sm font-medium">Notas (opcional)</label>
          <input
            className="w-full p-2 border rounded"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
          />

          <button
            onClick={doGenerate}
            disabled={pending || !isValid(spec)}
            className="px-4 py-2 rounded bg-blue-600 text-white disabled:opacity-60"
          >
            {pending ? "Gerando‚Ä¶" : "Gerar C√≥digo (Ctrl/‚åò+Enter)"}
          </button>

          {code && (
            <section className="p-4 rounded border bg-white">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium">Sa√≠da</h3>
                <button className="text-blue-600 underline text-sm" onClick={() => copy(code)}>
                  copiar
                </button>
              </div>
              <pre className="whitespace-pre-wrap text-sm overflow-x-auto">{code}</pre>
            </section>
          )}
        </section>
      )}

      <p className="text-xs text-gray-500">
        ‚ö†Ô∏è N√£o envie dados pessoais (nome, CPF, telefone, e-mail).
      </p>
    </main>
  );
}

Como testar

Fa√ßa login como m√©dico, d√™ consentimento, e deixe AI_ENABLED=true.

Acesse /ai-console.

Aba Perguntar ‚Üí digite e Ctrl/‚åò+Enter.

Aba Gerar C√≥digo ‚Üí escreva a especifica√ß√£o e Ctrl/‚åò+Enter.

Use copiar para levar a resposta/c√≥digo pro editor.