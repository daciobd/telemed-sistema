#!/bin/bash
# Script de Migra√ß√£o TeleMed Dashboard
# Execute com: bash migrate-dashboard.sh

echo "üöÄ Iniciando migra√ß√£o do TeleMed Dashboard..."

# Configura√ß√µes
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="backups/dashboard_$TIMESTAMP"
CURRENT_DIR=$(pwd)
NEW_DASHBOARD_URL="https://84622708-9db0-420a-a1f1-6a7a55403590-00-2d2fgen7wjybm.picard.replit.dev/dashboard-teste"

echo "üìÖ Timestamp: $TIMESTAMP"
echo "üìÅ Backup ser√° salvo em: $BACKUP_DIR"

# Fun√ß√£o para logging
log() {
    echo "$(date '+%H:%M:%S') - $1"
}

# Fun√ß√£o para verificar se comando foi bem sucedido
check_success() {
    if [ $? -eq 0 ]; then
        log "‚úÖ $1 - SUCESSO"
    else
        log "‚ùå $1 - FALHOU"
        echo "üö® Migra√ß√£o abortada devido a erro"
        exit 1
    fi
}

# FASE 1: BACKUP
log "üì¶ Iniciando backup completo..."

# Criar diret√≥rio de backup
mkdir -p "$BACKUP_DIR"
check_success "Cria√ß√£o do diret√≥rio de backup"

# Backup dos arquivos principais
if [ -f "area-medica.html" ]; then
    cp "area-medica.html" "$BACKUP_DIR/area-medica_original.html"
    check_success "Backup do arquivo principal"
fi

if [ -f "dashboard.html" ]; then
    cp "dashboard.html" "$BACKUP_DIR/dashboard_original.html"
    check_success "Backup do dashboard"
fi

if [ -f "index.html" ]; then
    cp "index.html" "$BACKUP_DIR/index_original.html"
    check_success "Backup do index"
fi

# Backup de diret√≥rios
if [ -d "assets" ]; then
    cp -r "assets" "$BACKUP_DIR/"
    check_success "Backup dos assets"
fi

if [ -d "css" ]; then
    cp -r "css" "$BACKUP_DIR/"
    check_success "Backup do CSS"
fi

if [ -d "js" ]; then
    cp -r "js" "$BACKUP_DIR/"
    check_success "Backup do JavaScript"
fi

log "‚úÖ Backup completo realizado!"

# FASE 2: DOWNLOAD DO NOVO DASHBOARD
log "‚¨áÔ∏è Baixando novo dashboard..."

# Baixar novo dashboard (adapte conforme sua estrutura)
curl -o "novo-dashboard.html" "$NEW_DASHBOARD_URL" 2>/dev/null
if [ $? -eq 0 ] && [ -s "novo-dashboard.html" ]; then
    check_success "Download do novo dashboard"
else
    log "‚ö†Ô∏è Download direto falhou, usando template local"
    # Usar template preparado localmente
    if [ -f "dashboard-template.html" ]; then
        cp "dashboard-template.html" "novo-dashboard.html"
        check_success "C√≥pia do template local"
    else
        log "‚ùå Template n√£o encontrado!"
        exit 1
    fi
fi

# FASE 3: VALIDA√á√ÉO
log "üîç Validando novo dashboard..."

# Verificar se arquivo n√£o est√° vazio
if [ ! -s "novo-dashboard.html" ]; then
    log "‚ùå Arquivo do novo dashboard est√° vazio!"
    exit 1
fi

# Verificar se cont√©m estrutura b√°sica
if grep -q "dashboard" "novo-dashboard.html" && grep -q "TeleMed" "novo-dashboard.html"; then
    check_success "Valida√ß√£o da estrutura b√°sica"
else
    log "‚ùå Estrutura do dashboard inv√°lida!"
    exit 1
fi

# FASE 4: MIGRA√á√ÉO
log "üîÑ Executando migra√ß√£o..."

# Identificar arquivo principal atual
MAIN_FILE=""
if [ -f "area-medica.html" ]; then
    MAIN_FILE="area-medica.html"
elif [ -f "dashboard.html" ]; then
    MAIN_FILE="dashboard.html"
elif [ -f "index.html" ]; then
    MAIN_FILE="index.html"
else
    log "‚ùå Arquivo principal n√£o encontrado!"
    exit 1
fi

log "üìù Arquivo principal identificado: $MAIN_FILE"

# Fazer backup do arquivo atual com timestamp
cp "$MAIN_FILE" "${MAIN_FILE%.html}_backup_$TIMESTAMP.html"
check_success "Backup timestampado do arquivo principal"

# Substituir pelo novo dashboard
cp "novo-dashboard.html" "$MAIN_FILE"
check_success "Substitui√ß√£o do arquivo principal"

# Limpar arquivo tempor√°rio
rm "novo-dashboard.html"

# FASE 5: CONFIGURA√á√ÉO DE LINKS
log "üîó Configurando links e redirecionamentos..."

# Criar arquivo de configura√ß√£o para links (se n√£o existir)
if [ ! -f "config/links-config.json" ]; then
    mkdir -p config
    cat > config/links-config.json << EOF
{
    "links": {
        "pacientes": "/pacientes",
        "medicos": "/medicos",
        "analytics": "/analytics",
        "prontuario": "/prontuario",
        "nova-consulta": "/consulta/nova",
        "novo-paciente": "/paciente/novo",
        "teleconsulta": "/teleconsulta",
        "prescricao": "/prescricao",
        "agenda": "/agenda",
        "relatorios": "/relatorios",
        "configuracoes": "/configuracoes"
    }
}
EOF
    check_success "Cria√ß√£o da configura√ß√£o de links"
fi

# FASE 6: TESTES B√ÅSICOS
log "üß™ Executando testes b√°sicos..."

# Verificar se arquivo foi criado corretamente
if [ -f "$MAIN_FILE" ] && [ -s "$MAIN_FILE" ]; then
    check_success "Verifica√ß√£o do arquivo migrado"
else
    log "‚ùå Arquivo migrado n√£o est√° correto!"
    
    # ROLLBACK AUTOM√ÅTICO
    log "üîÑ Executando rollback..."
    cp "$BACKUP_DIR/$(basename $MAIN_FILE)" "$MAIN_FILE"
    check_success "Rollback executado"
    exit 1
fi

# Verificar estrutura HTML b√°sica
if command -v html5validator &> /dev/null; then
    html5validator --root . --match "*.html" --ignore-re "Attribute.*not allowed"
    if [ $? -eq 0 ]; then
        log "‚úÖ Valida√ß√£o HTML - PASSOU"
    else
        log "‚ö†Ô∏è Valida√ß√£o HTML - AVISOS (n√£o cr√≠tico)"
    fi
else
    log "‚ÑπÔ∏è html5validator n√£o instalado, pulando valida√ß√£o HTML"
fi

# FASE 7: FINALIZA√á√ïES
log "üéØ Finalizando migra√ß√£o..."

# Criar script de rollback r√°pido
cat > "rollback-dashboard.sh" << EOF
#!/bin/bash
echo "üîÑ Executando rollback do dashboard..."
cp "$BACKUP_DIR/$(basename $MAIN_FILE)" "$MAIN_FILE"
echo "‚úÖ Rollback conclu√≠do!"
echo "üìÅ Backup restaurado de: $BACKUP_DIR"
EOF

chmod +x "rollback-dashboard.sh"
check_success "Cria√ß√£o do script de rollback"

# Limpar cache se houver
if [ -d "cache" ]; then
    rm -rf cache/*
    log "üßπ Cache limpo"
fi

# Registrar migra√ß√£o
echo "$(date): Migra√ß√£o executada - Backup em $BACKUP_DIR" >> migration-log.txt

# SUCESSO!
log "üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo ""
echo "üìã RESUMO DA MIGRA√á√ÉO:"
echo "   ‚úÖ Backup salvo em: $BACKUP_DIR"
echo "   ‚úÖ Arquivo migrado: $MAIN_FILE"
echo "   ‚úÖ Script de rollback: rollback-dashboard.sh"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "   1. Testar o novo dashboard no navegador"
echo "   2. Verificar todos os links"
echo "   3. Testar em diferentes dispositivos"
echo "   4. Comunicar usu√°rios sobre mudan√ßas"
echo ""
echo "üö® SE ALGO DER ERRADO:"
echo "   Execute: bash rollback-dashboard.sh"
echo ""
echo "üìû SUPORTE:"
echo "   Log de migra√ß√£o: migration-log.txt"
echo "   Backup completo: $BACKUP_DIR"

# Verificar se o arquivo principal est√° acess√≠vel
echo "üåê Testando acesso ao dashboard..."
if command -v curl &> /dev/null; then
    # Testar se o servidor est√° respondendo (adapte a URL)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost/$MAIN_FILE" || echo "000")
    if [ "$HTTP_CODE" = "200" ]; then
        log "‚úÖ Dashboard acess√≠vel via HTTP"
    else
        log "‚ö†Ô∏è Dashboard pode n√£o estar acess√≠vel (c√≥digo: $HTTP_CODE)"
        log "   Verifique se o servidor web est√° rodando"
    fi
else
    log "‚ÑπÔ∏è curl n√£o dispon√≠vel, teste manual necess√°rio"
fi

echo ""
echo "üéØ TESTE MANUAL:"
echo "   Acesse: http://seu-dominio/$MAIN_FILE"
echo "   Verifique se aparece o novo layout"
echo "   Teste todos os links do menu"
echo ""

exit 0